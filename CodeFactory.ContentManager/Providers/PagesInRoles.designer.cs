#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeFactory.ContentManager.Providers
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TestingCenter")]
	public partial class PagesInRolesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPagesInRole(PagesInRole instance);
    partial void UpdatePagesInRole(PagesInRole instance);
    partial void DeletePagesInRole(PagesInRole instance);
    partial void InsertSectionsInRole(SectionsInRole instance);
    partial void UpdateSectionsInRole(SectionsInRole instance);
    partial void DeleteSectionsInRole(SectionsInRole instance);
    #endregion
		
		public PagesInRolesDataContext() : 
				base(global::CodeFactory.ContentManager.Properties.Settings.Default.TestingCenterConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public PagesInRolesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PagesInRolesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PagesInRolesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PagesInRolesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PagesInRole> PagesInRoles
		{
			get
			{
				return this.GetTable<PagesInRole>();
			}
		}
		
		public System.Data.Linq.Table<SectionsInRole> SectionsInRoles
		{
			get
			{
				return this.GetTable<SectionsInRole>();
			}
		}
	}
	
	[Table(Name="dbo.PagesInRoles")]
	public partial class PagesInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _pageId;
		
		private string _roleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpageIdChanging(System.Guid value);
    partial void OnpageIdChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public PagesInRole()
		{
			OnCreated();
		}
		
		[Column(Storage="_pageId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid pageId
		{
			get
			{
				return this._pageId;
			}
			set
			{
				if ((this._pageId != value))
				{
					this.OnpageIdChanging(value);
					this.SendPropertyChanging();
					this._pageId = value;
					this.SendPropertyChanged("pageId");
					this.OnpageIdChanged();
				}
			}
		}
		
		[Column(Storage="_roleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SectionsInRoles")]
	public partial class SectionsInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _sectionId;
		
		private string _roleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsectionIdChanging(System.Guid value);
    partial void OnsectionIdChanged();
    partial void OnroleNameChanging(string value);
    partial void OnroleNameChanged();
    #endregion
		
		public SectionsInRole()
		{
			OnCreated();
		}
		
		[Column(Storage="_sectionId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid sectionId
		{
			get
			{
				return this._sectionId;
			}
			set
			{
				if ((this._sectionId != value))
				{
					this.OnsectionIdChanging(value);
					this.SendPropertyChanging();
					this._sectionId = value;
					this.SendPropertyChanged("sectionId");
					this.OnsectionIdChanged();
				}
			}
		}
		
		[Column(Storage="_roleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this.OnroleNameChanging(value);
					this.SendPropertyChanging();
					this._roleName = value;
					this.SendPropertyChanged("roleName");
					this.OnroleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
